# This workflow will build, test, and deploy to GitHub Packages.
name: Maven Package

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn -B deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_PACKAGES_REPO_URL: https://maven.pkg.github.com/${{ github.repository }}
        
  signal-vdm-vscode:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref_name }} == 'main' && ${{ github.repository }} == "glennlaursen/vdm-plantuml-plugin"
    
    steps:
      - name: Checking out
        uses: actions/checkout@v3
        
      - name: Getting POM artifact info
        id: get_artifact_info
        run: |
          echo "version=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          echo "groupId=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.groupId}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          echo "artifactId=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.artifactId}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
        
      - name: Send repository dispatch http request to VDM-VSCode
        run: |
          curl -L -X POST -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.VDM_VSCODE_PAT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/glennlaursen/vdm-vscode/dispatches \
          -d '{
                "event_type": "new-jar",
                "client_payload": {
                  "configId": "vdm-plantuml-plugin",
                  "version": "${{ steps.get_artifact_info.outputs.version }}"
                }
              }'
     
  test: # make sure the action works on a clean machine without building
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout Delete Package Versions Repo
    - uses: actions/delete-package-versions@v4
      with:
        package-name: 'dk.au.ece.vdmj.uml'
        package-type: 'maven'
        min-version-to-keep: 5
    
